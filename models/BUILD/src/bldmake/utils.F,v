head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv5_0:1.1.1.1 AMAD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2012.01.27.20.26.11;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2012.01.27.20.26.11;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
!-----------------------------------------------------------------------!
!  The Community Multiscale Air Quality (CMAQ) system software is in    !
!  continuous development by various groups and is based on information !
!  from these groups: Federal Government employees, contractors working !
!  within a United States Government contract, and non-Federal sources  !
!  including research institutions.  These groups give the Government   !
!  permission to use, prepare derivative works of, and distribute copies!
!  of their work in the CMAQ system to the public and to permit others  !
!  to do so.  The United States Environmental Protection Agency         !
!  therefore grants similar permission to use the CMAQ system software, !
!  but users are requested to provide copies of derivative works or     !
!  products designed to operate in the CMAQ system to the United States !
!  Government without restrictions as to use by others.  Software       !
!  that is used with the CMAQ system but distributed under the GNU      !
!  General Public License or the GNU Lesser General Public License is   !
!  subject to their copyright restrictions.                             !
!-----------------------------------------------------------------------!

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/BUILD/src/bldmake/utils.F,v 1.5 2011/10/21 18:51:01 sjr Exp $ 

C***********************************************************************
C   routines for processing files using system commands
C***********************************************************************

C*******************************************************************************
C    Routine to copy files
C*******************************************************************************
      Subroutine copyfile( fromfile, tofile, status )

      Use ModelCFG

      IMPLICIT NONE

      ! arguments
      Character(*)       :: fromfile
      Character(*)       :: tofile
      Integer            :: status

      ! functions
      Integer system

      ! local variables
      Character(FLD_LEN) :: cmdline

      cmdline = 'cp -fp ' // TRIM(fromfile) // ' ' // TRIM(tofile)

      status = system( TRIM(cmdline) )
      if( status.ne.0 ) then
        Write(*,'(''**ERROR** while running copyFile command:'')')
        Write(*,'(5x,''From file:'',a)') TRIM( fromfile)
        Write(*,'(5x,''To file:  '',a)') TRIM( tofile)
        endif

      return
      end Subroutine copyfile


C*******************************************************************************
C    Routine to delete files 
C*******************************************************************************
      Subroutine deletefile( file, status )

      Use ModelCFG

      IMPLICIT NONE

      ! arguments
      Character(*)       :: file
      Integer            :: status

      ! functions
      Integer system

      ! local variables
      Character(FLD_LEN) :: cmdline

      cmdline = 'rm ' // TRIM(file)

      status = system( TRIM(cmdline) )
      if( status.ne.0 ) then
        Write(*,'(''**ERROR** while deleting file:'',a,/)') TRIM(file)
        endif

      return
      end Subroutine deletefile


C*******************************************************************************
C    Routine to remove directory
C*******************************************************************************
      Subroutine rmdir( dir, status )

      Use ModelCFG

      IMPLICIT NONE

      ! arguments
      Character(*)       :: dir 
      Integer            :: status

      ! functions
      Integer system

      ! local variables
      Character(FLD_LEN) :: cmdline

      cmdline = 'rm -rf ' // TRIM(dir) 

      status = system( TRIM(cmdline) )
      if( status.ne.0 ) then
        Write(*,'(''**ERROR** while removing directory:'',a,/)') TRIM(dir)
        endif

      return
      end Subroutine rmdir      

C*******************************************************************************
C    Routine to run chmod to change file permissions 
C*******************************************************************************
      Subroutine chmod( file, arg, status )

      Use ModelCFG

      IMPLICIT NONE

      ! arguments
      Character(*)       :: file
      Character(*)       :: arg  
      Integer            :: status

      ! functions
      Integer system

      ! local variables
      Character(FLD_LEN) :: cmdline

      cmdline = 'chmod ' // TRIM(arg) // ' ' // TRIM(file)

      status = system( TRIM(cmdline) )
      if( status.ne.0 ) then
        Write(*,'(''**ERROR** while running chmod command on file:'',a,/)') TRIM(file)
        endif

      return
      end Subroutine chmod


C*******************************************************************************
C    Routine to run make using the current Makefile 
C*******************************************************************************
      Subroutine runMake( status )

      Use ModelCFG

      IMPLICIT NONE

      ! arguments
      Integer            :: status

      ! functions
      Integer system

      ! local variables
      Character(FLD_LEN) :: cmdline

      cmdline = 'make'

      status = system( TRIM(cmdline) )
      if( status.ne.0 ) then
        Write(*,'(''**ERROR** while running make command'',/)')
        endif

      return
      end Subroutine runMake

C*******************************************************************************
C    Subroutine that generates a random filename using time
C*******************************************************************************
      Subroutine getSCRNAME( name )

      IMPLICIT NONE

      ! arguments
      Character(*) :: name

      ! local variables
      Integer ivalues(8) !! year, month, day, GMT_offset, hour, minutes, seconds, miliseconds


      Call DATE_AND_TIME( values=ivalues )

      Write(name,'(''temp.'',i3.3)') ivalues(8)

      return
      end Subroutine getSCRNAME
@


1.1.1.1
log
@CMAQv5_0 release
@
text
@@
